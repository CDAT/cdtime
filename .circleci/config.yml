version: 2.1

aliases:
  - &setup_env
    name: setup_env
    command: |
       if [[ `uname` == "Darwin" ]]; then
          echo 'export WORKDIR=/Users/distiller/project/workdir/macos' >> $BASH_ENV
       else
          echo 'export WORKDIR=/home/circleci/project/workdir/linux' >> $BASH_ENV
       fi
       source $BASH_ENV
       mkdir -p $WORKDIR

  - &setup_miniconda
    name: setup_miniconda
    command: |
       source $BASH_ENV
       mkdir -p $WORKDIR
       git clone https://github.com/CDAT/cdat.git $WORKDIR/cdat
       # install_miniconda.py installs miniconda3 under $WORKDIR/miniconda
       python $WORKDIR/cdat/scripts/install_miniconda.py -w $WORKDIR -p 'py3'

  - &conda_rerender
    name: conda_rerender
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       make conda-rerender workdir=$WORKDIR branch=$CIRCLE_BRANCH

  - &conda_build
    name: conda_build
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       os=`uname`
       artifacts_dir="artifacts/artifacts.${os}.py_${PY_VER}"
       make conda-build workdir=$WORKDIR artifact_dir=$PWD/$artifacts_dir build_version=$PY_VER

  - &setup_run_tests
    name: setup_run_tests
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       export CONDA_PY_VER="python=$PY_VER"
       os=`uname`
       artifacts_dir="artifacts/artifacts.${os}.py_${PY_VER}"
       make setup-tests extra_pkgs="$CONDA_PY_VER $COVERAGE_PKGS"

       make conda-dump-env workdir=$WORKDIR artifact_dir=spec_artifacts conda_env_filename=$CIRCLE_JOB

  - &run_tests
    name: run_tests
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       make run-tests workdir=$WORKDIR

  - &conda_upload
    name: conda_upload
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base

       UPLOAD_OPTIONS="conda_upload_token=$CONDA_UPLOAD_TOKEN"
       make conda-upload workdir=$WORKDIR $UPLOAD_OPTIONS artifact_dir="$PWD/artifacts/*/"

executors:
   linux:
      machine:
         image: circleci/classic:latest
   macos:
      macos:
         xcode: "11.4.0"

jobs:
   rerender:
      parameters:
         os:
            type: executor
      executor: << parameters.os >>
      steps:
         - checkout
         - run: *setup_env
         - run: *setup_miniconda
         - run: *conda_rerender
         - persist_to_workspace:
              root: .
              paths: 
                 - workdir

   build_test:
      parameters:
         os:
            type: executor
         py_ver:
            type: string
      executor: << parameters.os >>
      environment:
         PY_VER: << parameters.py_ver >>
      steps:
         - checkout
         - attach_workspace:
              at: .
         - run: *setup_env
         - run: *conda_build
         - run: *setup_run_tests
         - run: *run_tests
         - store_artifacts:
              path: tests_html
              destination: tests_html
         - store_artifacts:
              path: spec_artifacts
              destination: spec_artifacts
         - persist_to_workspace:
              root: .
              paths: 
                 - workdir/*/miniconda/conda-bld/*/cdtime*bz2
                 - artifacts

   upload:
      machine:
         image: circleci/classic:latest
      steps:
         - checkout
         - attach_workspace:
              at: .
         - run: *setup_env
         - run: *conda_upload

workflows:
   cdtime:
      jobs:
         - rerender:
              matrix:
                 parameters:
                    os: [ linux, macos ]
              name: rerender-<< matrix.os >>

         - build_test:
              matrix:
                 parameters:
                    os: [ linux, macos ]
                    py_ver: [ "3.6", "3.7", "3.8" ]
              name: build_test-<< matrix.os >>-<< matrix.py_ver >>
              requires:
                 - rerender-<< matrix.os >>

         - upload:
              requires:
                 - build_test
              filters:
                 branches:
                    only: master
