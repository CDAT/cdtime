version: 2

checkout:
  post:
    - ./ci-support/checkout_merge_commit.sh
        
aliases:

  - &setup_miniconda
    name: setup_miniconda
    command: |
      mkdir -p workspace
      git clone -b validateNightly --depth 1 git@github.com:CDAT/cdat workspace/cdat
      python workspace/cdat/scripts/install_miniconda.py -w $WORKDIR -p 'py3'
      
  - &create_conda_env
    name: create_conda_env
    environment:
       PKGS: "numpy cdat_info libcdms libdrs_f testsrunner"
       CHANNELS: "-c cdat/label/unstable -c cdat/label/nightly -c conda-forge -c cdat"
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       conda config --set always_yes yes --set changeps1 no
       conda update -y -q conda
       conda config --set anaconda_upload no
       if [[ $PY_VER = "py2" ]]; then
          conda create -n $PY_VER $CHANNELS $PKGS 'python<3' $COMPILERS
       else
          conda create -n $PY_VER $CHANNELS $PKGS 'python>3' $COMPILERS
       fi
       source activate $PY_VER
       conda list
       source deactivate
       
  - &setup_cdtime
    name: setup_cdtime
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       source activate $PY_VER
       if [ $(uname) == "Linux" ]; then
           LDSHARED="$CC -shared -pthread" python setup.py install
       else
           python setup.py install
       fi
       source deactivate

  - &run_cdtime_tests
    name: run_cdtime_tests
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       set -e
       source activate $PY_VER
       python run_tests.py -v2
       RESULT=$?
       echo "*** $PY_VER test result: "${RESULT}
       exit $RESULT

  - &upload_cdtime
    name: upload_cdtime
    command: |
       export PATH=$HOME/project/$WORKDIR/miniconda/bin:$PATH
       # force loading conda gcc
       source activate $PY_VER
       export LABEL="nightly";
       if [[ $CIRCLE_BRANCH == "master" ]]; then
           conda install -n root conda-build anaconda-client
           bash ./ci-support/conda_upload.sh
       else
           export LABEL="unstable";
           echo "NOTE: upload LABEL="${LABEL}
           conda install -n root conda-build anaconda-client;
           bash ./ci-support/conda_upload.sh;
       fi

jobs:
  macos_cdtime_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "test_macos_cdtime_py2"
      PY_VER: "py2"
      COMPILERS: "gcc"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_cdtime
      - run: *run_cdtime_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html

  macos_cdtime_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "test_macos_cdtime_py3"
      PY_VER: "py3"
      COMPILERS: "gcc"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_cdtime
      - run: *run_cdtime_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html

  linux_cdtime_py2:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "test_linux_cdtime_py2"
      PY_VER: "py2"
      COMPILERS: "gcc_linux-64"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_cdtime
      - run: *run_cdtime_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html

  linux_cdtime_py3:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "test_linux_cdtime_py3"
      PY_VER: "py3"
      COMPILERS: "gcc_linux-64"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_cdtime
      - run: *run_cdtime_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html

workflows:
  version: 2
  cdtime_test:
    jobs:
      - macos_cdtime_py2
      - macos_cdtime_py3:
           requires:
              - macos_cdtime_py2
      - linux_cdtime_py2
      - linux_cdtime_py3:
           requires:
              - linux_cdtime_py2
      - upload_cdtime:
           requires:
			  - macos_cdtime_py2
			  - macos_cdtime_py3
			  - linux_cdtime_py2
			  - linux_cdtime_py3


       
